name: Tests - MySQL

on: [pull_request]

jobs:
  mysql:
    runs-on: ubuntu-latest

<<<<<<< HEAD
=======
    # Define environment variables for MySQL and Rails
>>>>>>> upstream/master
    env:
      DB_ADAPTER: mysql2
      MYSQL_PWD: root
      RAILS_ENV: test

    steps:
    # Checkout the repo
    - uses: actions/checkout@v2
<<<<<<< HEAD
      with:
        fetch-depth: 1

    - name: 'Install MySQL Packages'
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client-core-8.0 
        sudo apt-get install -y mysql-server
        sudo apt-get install -y libmysqlclient-dev 

    - name: 'Determine Ruby and Bundler Versions from Gemfile.lock'
      run: |
        echo "RUBY_VERSION=`cat ./Gemfile.lock | grep -A 1 'RUBY VERSION' | grep 'ruby' | grep -oE '[0-9]\.[0-9]'`" >> $GITHUB_ENV
        echo "BUNDLER_VERSION=`cat ./Gemfile.lock | grep -A 1 'BUNDLED WITH' | grep -oE '[0-9]\.[0-9]'`" >> $GITHUB_ENV

    - name: 'Install Ruby'
      uses: actions/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
=======

    # Install Ruby and run bundler
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6.3
        bundler-cache: true

    # Install Node
    - uses: actions/setup-node@v2
      with:
        cache: 'yarn'
>>>>>>> upstream/master

    # Copy all of the example configs over
    - name: 'Setup Default Configuration'
      run: |
<<<<<<< HEAD
        # Make copies of all the example config files
=======
>>>>>>> upstream/master
        cp config/database.yml.sample config/database.yml
        cp config/initializers/contact_us.rb.example config/initializers/contact_us.rb
        cp config/initializers/wicked_pdf.rb.example config/initializers/wicked_pdf.rb

<<<<<<< HEAD
    # Try to retrieve the gems from the cache
    - name: 'Cache Gems'
      uses: actions/cache@v2.1.5
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gem-

    - name: 'Bundle Install'
      run: |
        gem install bundler -v ${{ env.BUNDLER_VERSION }}
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3 --without pgsql rollbar aws

    - name: 'Setup Credentials'
      run: |
        # generate a default credential file and key
        EDITOR='echo "$(cat config/credentials.yml.example)" >' bundle exec rails credentials:edit

    # Try to retrieve the yarn JS dependencies from the cache
    - name: 'Cache Yarn Packages'
      uses: actions/cache@v2.1.5
      with:
        path: node_modules/
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-yarn-
          ${{ runner.os }}-

    - name: 'Determine wkhtmltopdf location'
      run: echo "WICKED_PDF_PATH=`bundle exec which wkhtmltopdf`" >> $GITHUB_ENV

    - name: 'Yarn Install'
      run: |
        yarn install

    - name: 'Start MySQL'
      run: |
        sudo systemctl unmask mysql
        sudo systemctl start mysql

    - name: 'Setup Test DB'
      run: bin/rails db:setup RAILS_ENV=test

    - name: 'Migrate DB'
      run: bin/rails db:migrate RAILS_ENV=test

    - name: 'Compile Assets'
      run: |
        bin/rails webpacker:compile
        bin/rails assets:precompile

    - name: 'Run Karma Tests'
      run: yarn test

=======
    # Stub out the Rails credentials file so that we can start the Rails app
    - name: 'Setup Credentials'
      run: EDITOR='echo "$(cat config/credentials.yml.example)" >' bundle exec rails credentials:edit

    # Set the path to the wkhtmltopdf executable
    - name: 'Determine wkhtmltopdf location'
      run: echo "WICKED_PDF_PATH=`bundle exec which wkhtmltopdf`" >> $GITHUB_ENV

    # Run yarn install for JS dependencies
    - name: 'Yarn Install'
      run: yarn install

    # Start the DB server and initialize the DB
    - name: 'Start MySQL'
      run: |
        sudo systemctl start mysql
        bin/rails db:setup RAILS_ENV=test
        bin/rails db:migrate RAILS_ENV=test

    # Prebuild the CSS, JS and image assets
    - name: 'Precompile all of the Assets'
      run: bin/rails assets:precompile

    # briley - comment out Karma tests due to issues with dependencies. We should
    #          replace these with RSpec feature tests
    # Run the JS tests
    # - name: 'Run Karma Tests'
    #   run: yarn test

    # Run  the unit and functional tests
>>>>>>> upstream/master
    - name: 'Run Rspec Unit and Functional Tests'
      run: |
        bin/bundle exec rspec spec/models/ spec/policies/ spec/services/ spec/helpers/
        bin/bundle exec rspec spec/controllers/ spec/presenters/ spec/requests/ spec/views
        bin/bundle exec rspec spec/mixins/

<<<<<<< HEAD
    # Only run Integration tests if the PR or Push is to master or development branches
=======
    # Run the time consuming integration tests (using Chrome headless browser)
>>>>>>> upstream/master
    - name: 'Run Rspec Integration Tests'
      run: bin/bundle exec rspec spec/features/
