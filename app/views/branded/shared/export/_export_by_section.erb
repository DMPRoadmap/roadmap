<%# locals: { research_outputs, questions, section  } %>
<% research_outputs.each do |research_output| %>
  <% section_has_common_answers = research_output.main().common_answers?(section[:id]) %>
  <% show_research_output_content = @show_unanswered || (!@show_unanswered && !research_output.get_answers_for_section(section[:id]).empty?) %>
  <% research_output_default_and_alone = research_output.is_default && research_outputs.length == 1 %>
  <% research_output_description = research_output.json_fragment.research_output_description %>

  <% if !research_output_default_and_alone && 
        !section_has_common_answers && 
        show_research_output_content %>
  <div class="research-output">
    <h3><%= research_output_description.data['title'] %></h3>
  <% end %>
  <% questions.each do |question| %>
    <% answer = section_has_common_answers ? 
          @plan.answer(question[:id], false, research_output.main().id) : 
          @plan.answer(question[:id], false, research_output[:id]) %>
    <% blank = answer.present? ? answer.blank? : true %>
    <% options = answer.present? ? answer.question_options : [] %>
    <% fragment = answer.present? ? answer.madmp_fragment : nil %>

    <% next if  @plan.template.structured? && should_hide_question(question, research_output) %>

    <%  unless @show_unanswered == false && blank  %>
      <div class="question">
        <% if @show_sections_questions%>
          <%# Hack: for DOCX export - otherwise, bold highlighting of question inconsistent. %>
          <% if local_assigns[:export_format] && export_format == 'docx' %>
            <strong><h4><%=  sanitize question[:text].to_s, scrubber: TableFreeScrubber.new %></h4></strong>
          <% else %>
            <div class="bold"><h4><%=  sanitize question[:text].to_s, scrubber: TableFreeScrubber.new %></h4></div>
          <% end %>
          <br/>
        <br/>
        <% end %>
        <%# case where Question has options %>
        <% if options.present? && options.any? %>
          <ul>
          <% options.each do |opt| %>
            <li><%= opt.text %></li>
          <% end %>
          </ul>
        <% end %>
        <% if question[:format].rda_metadata? && !blank %>
          <% ah = answer.answer_hash %>
          <% if ah['standards'].present? %>
          <ul>
            <% ah['standards'].each do |id, title| %>
            <li><%= title %></li>
            <% end %>
          </ul>
          <% end %>
          <p><%= sanitize ah['text'] %></p>
          <br/>
        <% end %>
        <% if @plan.template.structured? && fragment.present? %>
          <%= render partial: 'shared/export/display_madmp_fragment', 
                      locals: {
                          fragment: fragment,
                          schema: fragment.madmp_schema,
                          classname: fragment.classname,
                          locale: LocaleService.to_gettext(locale: @plan.template.locale),
                          table_header: nil
                      } %>
        <%# case for displaying comments OR text %>
        <% elsif !blank %>
          <%= sanitize answer&.text %>
          <br/>
        <% else %>
          <br/>
          <p><%= _('Question not answered.') -%></p>
          <br/><br/>
          <br />
        <% end %>
        <br />
      </div>
    <% end %>
  <% end %> <!-- questions.each -->

  <% if !research_output_default_and_alone && 
        !section_has_common_answers && 
        show_research_output_content %>
    </div> <!-- .research_output -->
  <% end %>
  <% if section_has_common_answers %>
  <% break %> <!-- break if is research output has common answers, only display the first -->
  <% end %>
<% end %><!-- research_outputs.each -->
